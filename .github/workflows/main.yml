# The name of your workflow.
name: Test and build
# Trigger the workflow on push and pull request.
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
# A workflow run is made up of one or more jobs. Jobs run parallel by default.
jobs:
  # First job.
  test:
    # The type of machine to run the job on. []
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ./flutter_bloc
    steps:
      - uses: actions/checkout@v2
      - name: Install Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: 'dev'
      - name: Install Dependencies
        run: flutter pub get
      - name: Run Analizer
        run: flutter analyze
      - name: Run unit and widget test. Create coverage report
        run: flutter test --coverage test/main_test.dart
      - name: Install CLI package to remove files from coverage report easily
        run: pub global activate remove_from_coverage
      - name: Remove .g.dart files from coverage report
        run: pub global run remove_from_coverage:remove_from_coverage -f coverage/lcov.info -r '.g.dart$'
      - name: Remove .freezed.dart files from coverage report
        run: pub global run remove_from_coverage:remove_from_coverage -f coverage/lcov.info -r '.freezed.dart$'
      - name: Upload coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)

  # drive_ios:
  #   #creates a build matrix for your jobs
  #   strategy:
  #     #set of different configurations of the virtual environment.
  #     matrix:
  #       device:
  #         - 'iPhone 8 (13.5)'
  #         - 'iPhone 11 Pro Max (13.5)'
  #     fail-fast: false
  #   #if conditional to prevent a job from running
  #   if: github.event_name != 'pull_request'
  #   runs-on: macos-latest
  #   #Identifies any jobs that must complete successfully before this job will run.
  #   needs: test
  #   steps:
  #     - name: List all simulators
  #       run: xcrun instruments -s
  #     # get UUID  simulator and boot a simulator on mac from  command line
  #     - name: Start Simulator
  #       run: |
  #         UDID=$(
  #           xcrun instruments -s |
  #           awk \
  #             -F ' *[][]' \
  #             -v 'device=${{ matrix.device }}' \
  #             '$1 == device { print $2 }'
  #         )
  #         xcrun simctl boot "${UDID:?No Simulator with this name found}"
  #     - uses: actions/checkout@v2
  #     - uses: subosito/flutter-action@v1
  #       with:
  #         channel: 'dev'
  #     # Run flutter integrate tests
  #     - name: Run Flutter Driver tests
  #       run: flutter drive --target=test_driver/app.dart
  # drive_android:
  #   #if conditional to prevent a job from running
  #   if: github.event_name != 'pull_request'
  #   runs-on: macos-latest
  #   defaults:
  #     run:
  #       working-directory: ./flutter_bloc
  #   #creates a build matrix for your jobs
  #   strategy:
  #     #set of different configurations of the virtual environment.
  #     matrix:
  #       api-level: [21, 29]
  #       target: [default]
  #   needs: test
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install Flutter
  #       uses: subosito/flutter-action@v1
  #       with:
  #         channel: 'dev'
  #     - name: Run Flutter Driver tests
  #       #GitHub Action for installing, configuring and running Android Emulators (work only Mac OS)
  #       #https://github.com/ReactiveCircus/android-emulator-runner
  #       uses: reactivecircus/android-emulator-runner@v1
  #       with:
  #         api-level: ${{ matrix.api-level }}
  #         target: ${{ matrix.target }}
  #         arch: x86_64
  #         profile: Nexus 6
  #         script: flutter drive --target=test_driver/app.dart
  # Second job.
  # build:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ./flutter_bloc
  #   container:
  #     image: google/dart:latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install dependencies
  #       run: flutter pub get
  #     - name: Run tests
  #       run: flutter test test/main_test.dart
